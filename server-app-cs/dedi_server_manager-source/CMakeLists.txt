# Copyright (C) 2013-2020 iFunFactory Inc. All Rights Reserved.
#
# This work is confidential and proprietary to iFunFactory Inc. and
# must not be used, disclosed, copied, or distributed without the prior
# consent of iFunFactory Inc.


# Generated by funapi_initiator
# You can edit this file to meet your taste.


# Enforces a minimum version.
cmake_minimum_required(VERSION 2.6)


###############################################################################
# Environment setting
###############################################################################

# Sets cmake PROJECT_NAME var before importing Funapi.cmake.
# Enables only C/C++.
project(dedi_server_manager CXX C)

set(PROJECT_NAME_CAMEL_CASE DediServerManager)

# Sets Mono project.
set(IS_MONO_PROJECT true)
set(MONO_DLL_NAME DediServerManager.dll)

# Sets USE_CCACHE if you have installed ccache and want to leverage it.
set(USE_CCACHE true)


# Package maintainer email address.
# This will be used to generate debian and/or rpm package(s).
set(CONTACT_EMAIL "contact@yourcompany.com")

# Generate a distribution package in tgz? Only for Ubuntu or Centos.
set(WANT_TGZ_PACKAGE true)

# Generate a distribution package in Debian DEB? Only for Ubuntu.
set(WANT_DEB_PACKAGE false)

# Generate a distribution package in Redhat RPM? Only for Centos.
set(WANT_RPM_PACKAGE false)

# Source managed by git can append a build number from git commit id.
set(PACKAGE_WITH_BUILD_NUMBER_FROM_GIT false)

# Source managed by svn can append a build number from svn info.
set(PACKAGE_WITH_BUILD_NUMBER_FROM_SVN false)

# Generate .DLL for Unity Engine
set(GENERATE_UNITY_PROTOBUF_DLL false)

# Generate .DLL for Unity Dedicated Server RPC
set(GENERATE_UNITY_DEDICATED_SERVER_RPC_PROTOBUF_DLL false)

# Sets if you want different flavors.
# Please note that "default" is reserved for the default flavor.
# If you enable APP_FLAVORS, you also have to have a manifest file for each flavor.
# like src/MANIFEST.${flavor}.json (e.g., src/MANIFEST.game.json, ...)
#set(APP_FLAVORS lobby game chat)

# Sets if you want to include all flavors in a single package.
#set(WANT_ONE_PACKAGE_FOR_ALL_FLAVORS true)


# Sets these according to your init script favorites.
# You can turn on one or both.
# If none are defined, iFun Engine will implicitly assume based on the package type.
# (i.e., Upstart for DEB and Systemd for RPM)
# If you do not want any init system, explicitly set them to false.
#set(WANT_UPSTART false)
#set(WANT_SYSTEMD false)


set(RESOURCE_DIRS game_data client_data misc_data src/json_protocols)


# Shows compiler warnings?
set(WANT_COMPILER_WARNING true)


# Enable/disable UTF-8 check on files (.h, .cc, .hpp, .c, .json, .xml, .txt)
set(ENABLE_UTF8_CHECKER true)


# In case running on Windows, check if want to use %ProgramData% folder
# as a /var folder on Linux. The folder will store logs and crashdumps.
#set(USE_PROGRAMDATA_FOLDER)


# Builds with Address Sanitizer for memory corruption debugging.
#set(USE_ADDRESS_SANITIZER true)


if (NOT WIN32)
  set(CMAKE_MODULE_PATH "/usr/share/funapi/cmake")
else ()
  if (${CMAKE_VS_PLATFORM_TOOLSET} MATCHES "v142")
    set(FUNAPI_ROOT_VAR_NAME "FUNAPI_ROOT_VS2019")
  elseif (${CMAKE_VS_PLATFORM_TOOLSET} MATCHES "v141")
    set(FUNAPI_ROOT_VAR_NAME "FUNAPI_ROOT_VS2017")
  else ()
    message(FATAL_ERROR "Not supported Visual C++ toolset version: ${CMAKE_VS_PLATFORM_TOOLSET}")
  endif ()

  if (NOT DEFINED ENV{${FUNAPI_ROOT_VAR_NAME}})
    message(FATAL_ERROR "Environment variable '${FUNAPI_ROOT_VAR_NAME}' is not set."
                        "Maybe, you haven't installed iFun Engine."
                        "Please download it from https://ifunfactory.com/engine/windows/")
  endif ()
  file(TO_CMAKE_PATH "$ENV{${FUNAPI_ROOT_VAR_NAME}}" FUNAPI_ROOT_FORWARD_SLASH)
  set(CMAKE_MODULE_PATH "${FUNAPI_ROOT_FORWARD_SLASH}/share/funapi/cmake")
endif ()

include(Funapi)



###############################################################################
# Visual Studio rules
###############################################################################

if (WIN32)
  set_property(DIRECTORY PROPERTY VS_STARTUP_PROJECT "${PROJECT_NAME}")
endif ()



###############################################################################
# Sub-modules
###############################################################################

# Keeps adding targets/commands.
add_subdirectory(src)
