# Generated by funapi_initiator
# You can edit this file to meet your taste.

###############################################################################
# Put your build rules here.
###############################################################################

# NOTE: IF YOU HAVE MORE SOURCE FILES, ADD HERE.
set(
  ADDITIONAL_CPP_SOURCES
  ${PROJECT_NAME}_server.cc
)

set(
  ADDITIONAL_PROTO_SOURCES
  ${PROJECT_NAME}_rpc_messages.proto
  ${PROJECT_NAME}_dedicated_server_rpc_messages.proto
  ${PROJECT_NAME}_messages.proto
)

set(
  ADDITIONAL_LIBRARIES
)


###############################################################################
# Inclusion after setting variables.
###############################################################################

set(CMAKE_MODULE_PATH "/usr/share/funapi/cmake")
include(Funapi-src)

###############################################################################
# ${PROJECT_NAME} and TARGET rules are available after above inclusion.
# For example, you may want to use predefined macros for your project.
# With 'set_property' command, you can define multiple flags in your code.
#
# **PLEASE NOTE**: flags must have whitespace around both sides
# set_property(... " -DMY_FLAG1 -DMY_FLAG2 ") : OK.
# set_property(... "-DMY_FLAG1 -DMY_FLAG2") : No, it doesn't work.
#
# You can check the flag in your .cc/.h file with the followings:
# #ifdef MY_FLAG1
#    // Do whatever you want
# #endif
###############################################################################
#if (CMAKE_BUILD_TYPE MATCHES Debug) # for debug build only
#    set_property(TARGET ${PROJECT_NAME} APPEND_STRING PROPERTY COMPILE_FLAGS " -DMY_FLAG1 -DMY_FLAG2 ")
#endif()
